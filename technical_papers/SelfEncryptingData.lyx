#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass IEEEtran
\use_default_options false
\maintain_unincluded_children false
\language british
\language_package default
\inputencoding default
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_title "Self Encrypting Data"
\pdf_author "David Irvine"
\pdf_subject "Encryption"
\pdf_keywords "security, freedom, privacy, encryption"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_package amsmath 0
\use_package amssymb 0
\use_package cancel 1
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic true
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 2
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Self Encrypting Data
\end_layout

\begin_layout Author
\begin_inset Flex Author Name
status open

\begin_layout Plain Layout
David Irvine
\end_layout

\end_inset


\begin_inset Flex Author Mark
status open

\begin_layout Plain Layout
1
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Author Affiliation
status open

\begin_layout Plain Layout
MaidSafe.net, 72 Templehill, Troon, South Ayrshire, Scotland, UK.
 KA10 6BE.
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Flex Author Mark
status open

\begin_layout Plain Layout
1
\end_layout

\end_inset

david.irvine@maidsafe.net
\end_layout

\begin_layout Page headings
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Irvine: Self Encrypting Data
\end_layout

\end_inset


\end_layout

\begin_layout Address
First published September 2010.
 Revised June 2015.
\end_layout

\begin_layout Abstract
This paper presents a system of encryption that requires no user intervention
 or passwords.
 The resultant data item then has to be saved or stored somewhere as in
 all methods.
 The encryption here is aimed at creating cipher-text (encrypted) objects
 that are extremely strong and closer to perfect in terms of reversibility,
 as opposed to known encryption ciphers available today.
 This paper focuses on symmetric encryption, but does not introduce a new
 cipher.
 Instead the paper describes a method of enhancing the use of this technology
 to produce highly secure data and, to do so in many situations and implementati
ons.
\end_layout

\begin_layout Keywords
security, freedom, privacy, encryption
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
\begin_inset Flex Paragraph Start
status open

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
E
\end_layout

\end_inset

ncryption
\end_layout

\end_inset

 has been a goal of man since before the times of the Romans, and Caesar
 Ciphers (simple replacement ciphers) through Enigma machine ciphers to
 modern day complex matrix manipulations are present in abundance in computer
 enhanced algorithms.
 This paper describes a way to use such algorithms in addition to direct
 encryption that clearly shows significant improvements in our use of encryption.
\end_layout

\begin_layout Subsection
The Issues Addressed by this Paper
\end_layout

\begin_layout Standard
The issue with today's encryption of data is in just that; we encrypt data,
 as a whole.
 This reduces the potential set of possible inputs, i.e.
 if we are chasing somebody's bank balance, we may expect the output to
 be roughly the size of a bank statement, and guess what? It is! Furthermore,
 the security of a whole piece of data encrypted with a single algorithm
 depends upon just that single algorithm not getting broken.
 Almost all encryption ciphers appear to reduce in effectiveness as we understan
d the mathematics better and create more powerful computers.
 One may believe then, that the answer is to encrypt bits of files.
 However, this would require many passwords or algorithms; like putting
 more locks on a door to make it more secure, it gives people a headache
 to think that they may have to remember multiple passwords for each file.
 This is unlikely to be a successful manoeuvre.
\end_layout

\begin_layout Subsection
Conventions Used
\end_layout

\begin_layout Standard
This paper does not require all the operations listed below, but lists these
 for example implementations, which are outlined later.
\end_layout

\begin_layout Standard
Hash = Hash function such as SHA, MD5, etc.
 We assume a cryptographically secure algorithm.
\end_layout

\begin_layout Standard
Enc = Symmetrical encryption such as AES, 3DES, etc.
\end_layout

\begin_layout Subsection
Symmetric Encryption
\end_layout

\begin_layout Standard
This paper will use AES as an example to cover all symmetric encryption
 algorithms (to some extent) and therefore will use a key and initialisation
 vector and plain-text input data.
 There will be no mention of MAC or similar additions to the algorithms
 in the hope that the reader would not attempt to implement a poorly stated
 or incorrect algorithm.
 The primary role in, interestingly, not encryption, it is to produce difficult
 to guess uncompress-able output.
 There may be alternative methods of producing difficult to guess uncompress-abl
e output, these are not considered here.
\end_layout

\begin_layout Proposition
Difficult to guess and uncompress-able output equates to random results
 based on random input data and random, unrelated algorithm inputs (plain
 text, key and iv in the case of modern symmetric cyphers).
\end_layout

\begin_layout Subsection
Cryptographically Secure Hash
\begin_inset CommandInset label
LatexCommand label
name "sub:Cryptographically-secure-hash"

\end_inset


\end_layout

\begin_layout Fact
The ideal cryptographic hash function has four main or significant properties:
\end_layout

\begin_layout Enumerate
it is easy (but not necessarily quick) to compute the hash value for any
 given message
\end_layout

\begin_layout Enumerate
it is infeasible to generate a message that has a given hash
\end_layout

\begin_layout Enumerate
it is infeasible to modify a message without changing the hash
\end_layout

\begin_layout Enumerate
it is infeasible to find two different messages with the same hash
\end_layout

\begin_layout Conjecture
A cryptographically secure hash which is a one way function will create
 output that has a uniform distribution and can be computed in polynomial
 time.
 The output should be in fact random, although can be affected by size of
 input.
 Given a sufficiently large input the output will be random (within limits).
 The size of input required is dependent on the strength of the hash functions
 employed.
 In essence output can be considered evenly distributed and random.
 The limits of this randomness are not presented in this paper.
 It is assumed a sufficiently secure algorithm acting on a significantly
 large input will produce randomness that is acceptable for this conjecture.
\end_layout

\begin_layout Standard
A hash function can be thought of as a digital fingerprint.
 Just as a fingerprint of a person is supposed to be unique, then a digital
 hash function is also supposedly unique.
 We have all heard of two people with identical fingerprints (but perhaps
 have never met any!) and in the digital world it can be possible to get
 two pieces of data with the same hash result.
 This is referred to as a collision and reduces the security of the hash
 algorithm.
 The more secure the algorithm, then the likelihood of a collision is reduced.
 It is very similar to taking more points of reference on an actual fingerprint
 to reduce collisions in that area of science also.
 This is an area where both systems share a similarity in the increasing
 complexity of measurement and recording of data points of reference.
\end_layout

\begin_layout Standard
In cryptographically secure hashing, the data is analysed and a fixed length
 key called the hash of the data is produced.
 Again similarly to human fingerprinting a hash cannot reveal data just
 as a fingerprint cannot reveal a person (i.e.
 you cannot recreate the person from the print) and you cannot recreate
 the data from the hash.
\end_layout

\begin_layout Standard
Early hash algorithms such as MD4, MD5 and even early SHA are considered
 broken, in the sense that they simply allow too many collisions to occur.
 Hence larger descriptors (keylengths) and more efficient algorithms are
 almost always required.
\begin_inset Foot
status open

\begin_layout Plain Layout
you can see where the problem exists as the logical conclusion is a key
 longer than any known piece of uncompress-able data, to ensure no collisions
\end_layout

\end_inset


\end_layout

\begin_layout Section
Implementation
\end_layout

\begin_layout Subsection
Overview
\begin_inset CommandInset label
LatexCommand label
name "sub:Overvew"

\end_inset


\end_layout

\begin_layout Enumerate
Split into several chunks (C
\begin_inset Formula $_{n}$
\end_inset

).
\end_layout

\begin_layout Enumerate
Take hash of each chunk (H
\begin_inset Formula $_{c_{n}})$
\end_inset

.
\end_layout

\begin_layout Enumerate
In case of AES or similar cypher, use [keysize] (C
\begin_inset Formula $_{n-1})$
\end_inset

 as the key, use [next bytes iv size](C
\begin_inset Formula $_{n-1})$
\end_inset

 as the IV.
 (for AES 0 to 32 == key and 32 to 48 == iv)
\end_layout

\begin_layout Enumerate
Create obfuscation chunk (OBFC
\begin_inset Formula $_{n}$
\end_inset

) by concatenating the hashes of other chunks (C
\begin_inset Formula $_{n}$
\end_inset

, [unused part of]C
\begin_inset Formula $_{n-1}$
\end_inset

 and C
\begin_inset Formula $_{n-2}$
\end_inset

).
\end_layout

\begin_layout Enumerate
Run encryption cypher or similar reversible method on (C
\begin_inset Formula $_{n})$
\end_inset

, to produce (C
\begin_inset Formula $_{random}$
\end_inset

).
\end_layout

\begin_layout Enumerate
Now data is considered to be randomised and of the same length as input
 data.
\end_layout

\begin_layout Enumerate
OBFC
\begin_inset Formula $_{n}$
\end_inset

 is also random output, but of a length less than the input data.
\end_layout

\begin_layout Enumerate
Now we take OBFC
\begin_inset Formula $_{n}(repeated)\;XOR\;C_{random}$
\end_inset

 to produce our output data.
\end_layout

\begin_layout Enumerate
Rename each with the hash of the new content and save these hashes.
\end_layout

\begin_layout Definition
One Time Pad as defined by Shannon
\begin_inset CommandInset citation
LatexCommand cite
key "2,5"

\end_inset

 is regarded as the only cryptosystem with theoretically perfect secrecy.
 It posseses the following 3 items that define it:
\end_layout

\begin_layout Enumerate
Pads cannot be reused.
\end_layout

\begin_layout Enumerate
For a Shannon implementation as opposed to earlier cyclic pads, the pad
 must be as long as the message to be encrypted.
 i.e.
 a pad must be non repeating.
 This is the enhancement that takes this system a step further than the
 Vernam cypher
\begin_inset CommandInset citation
LatexCommand cite
key "3,4"

\end_inset


\end_layout

\begin_layout Enumerate
The pad must contain only random data.
\end_layout

\begin_layout Fact
In this paper on the NSA web site, the Vernam cypher appears as the
\emph on
unbreakable cypher
\emph default
 for on line tty (teleprinter) encryption, although XOR in this case is
 called modulo 2 division (simply different wording for the same mathematical
 operation).
 This paper is found here http://www.nsa.gov/about/_files/ cryptologic_heritage/pu
blications/misc/tsec_kw26.pdf The title of this paper is
\begin_inset Quotes eld
\end_inset

Securing Record Communications: The TSEC/KW-26
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Conjecture
As the Shannon system suggests a one time use random pad that is longer
 than the data to be encrypted is required for a true one time pad.
 In this paper we have used a symmetric encryption cypher (AES as example,
 with CFB) to introduce what can be described as randomness to the data
 itself.
 If this is truly random then it's the perfect pad in it's own right.
 We have also created an Obfuscation pad, which almost creates a pad that
 is usable as a OTP, however it fails to answer 2 above, i.e.
 it repeats as it's shorted than the data to be encrypted.
\end_layout

\begin_layout Proposition
We propose given the above definition and conjecture that the data itself
 be considered the pad and the obfuscation chunk is now repeating data (which
 is allowed by the definition of the Shannon Pad), although this is rather
 large amount of repeating data, it is also repeating random data.
 We propose this be considered as a form of one time pad.
 Added to that we also propose the actions taken on the data ton include
 randomness as well as pad randomness may in fact take the whole concept
 of OTP, just a little further, making a guess significantly more difficult.
\end_layout

\begin_layout Subsection
File Chunking
\end_layout

\begin_layout Definition
\align left
\begin_inset Formula $\mathsf{f_{c}}$
\end_inset

 ≡ file content; 
\begin_inset Formula $\mathsf{f_{m}}$
\end_inset

≡ file metadata; 
\begin_inset Formula $\mathsf{fh}$
\end_inset

 ≡
\begin_inset Formula $\mathsf{H(f_{c})}$
\end_inset

 or 
\begin_inset Formula $\mathsf{fh\equiv H(H(C_{1})+H(C_{2})+...H(C_{n-1}))}$
\end_inset

.
\end_layout

\begin_layout Enumerate
Take the size of the file
\begin_inset Formula $\mathsf{(f.size())}$
\end_inset

 and calculate number 
\begin_inset Formula $\mathsf{n}$
\end_inset

 of chunks
\begin_inset Foot
status open

\begin_layout Plain Layout
Number of chunks is a setting and depends on implementation, you may wish
 a max number of chunks, or maximum chunk size, this decision and code is
 left to the reader.
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Create chunks of 1MB (settable) in length and hash these chunks.
\end_layout

\begin_layout Enumerate
Take hash of each chunk and log these hashes in a structure, which we will
 refer to as a data map.
\end_layout

\begin_layout Standard
The chunks are created with fixed size to ensure the set required to recreate
 the file is as almost as large as the number of available chunks in any
 data store.
 This data map is mapped to file metadata through 
\begin_inset Formula $\mathsf{fh}$
\end_inset

.
\end_layout

\begin_layout Subsection
Encryption Step
\end_layout

\begin_layout Standard
In the encryption stage, we require two separate non deterministic pieces
 of data, the encryption key (or password) and the Initialisation Vector
 (IV).
 To ensure all data encrypts to the same end result we determine the IV
 from what can be considered non deterministic data
\begin_inset Foot
status open

\begin_layout Plain Layout
This is an area of debate as to whether this is non deterministic data,
 in this case the argument is that the only way to determine the data is
 to have the original data in the first place, therefore there is no need
 to determine keys as it would be fruitless.
 This is somewhat of a philosophical debate and likely to be the topic of
 a few furled eyebrows over a few drams in a few bars for a few years to
 come.
\end_layout

\end_inset

, that being the hash of one of the chunks.
\end_layout

\begin_layout Definition
Encrypt with key and IV is shown as 
\begin_inset Formula $\mathsf{Enc_{[key][IV]}(data)}$
\end_inset

 in the following example.
 It is assumed the key and the IV for chunk 
\begin_inset Formula $\mathsf{n}$
\end_inset

 are derived from separate portions of the hash of chunk 
\begin_inset Formula $\mathsf{n-1}$
\end_inset

.
 In the case of AES for instance the first 32 bytes of this hash are the
 Key and the next 16 bytes may be presumed to be the IV.
 Therefore these items are selected from random data, although the randomness
 can be deterministic (if we can guess the output of an algorithm such as
 AES, by guessing the input parameters, i.e.
 brute force) on the case of a one way function such as a cryptographic
 hash (as discussed).
\end_layout

\begin_layout Example
\begin_inset Formula $\mathsf{Enc_{[H(C_{n-1})first32bytes][H(C_{n-1})bytes32to48]}(C_{n})\equiv E_{n}}$
\end_inset


\end_layout

\begin_layout Subsection
Obfuscation Step
\end_layout

\begin_layout Standard
In the obfuscation step, we pollute each chunk with data from other chunks.
\end_layout

\begin_layout Example
For 
\begin_inset Formula $\mathsf{E_{n}}$
\end_inset

, create an identically-sized data chunk by repeated concatenating the hash
 of chunk 
\begin_inset Formula $\mathsf{n}$
\end_inset

 with the unused part of the hash of chunk 
\begin_inset Formula $\mathsf{n-1}$
\end_inset

 and the hash of chunk 
\begin_inset Formula $\mathsf{n-2}$
\end_inset

, then trimming to size, i.e.
 
\begin_inset Formula $\mathsf{H(C_{n})+H(C_{n-1})last16bytes+H(C_{n-2})+H(C_{n})+...}$
\end_inset


\end_layout

\begin_layout Standard
This is called the XOR chunk 
\begin_inset Formula $\mathsf{n}$
\end_inset

 (
\begin_inset Formula $\mathsf{X_{n}}$
\end_inset

) and is unsurprisingly XORed (
\begin_inset Formula $\bigoplus$
\end_inset

) with chunk 
\begin_inset Formula $\mathsf{n}$
\end_inset

.
\begin_inset Foot
status open

\begin_layout Plain Layout
In this case we have selected XOR to represent a logical operation to obfuscate
 the data, this is not restrictive in any way and may be replaced by other
 obfuscation methods.
\end_layout

\end_inset


\end_layout

\begin_layout Example
\align left
\begin_inset Formula $\mathsf{E_{1}\bigoplus X_{1}\equiv EX_{1}}$
\end_inset

, 
\begin_inset Formula $\mathsf{E_{2}\bigoplus X_{2}\equiv EX_{2}}$
\end_inset

, etc.
\end_layout

\begin_layout Subsection
Data Map
\end_layout

\begin_layout Standard
In the previous sections, we described the process of self encrypting data.
 However, it did leave an important question unanswered.
 How do we reverse this process to retrieve the plain-text from the cipher-text
 chunks? The answer is data maps.
\end_layout

\begin_layout Standard
In the 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Overvew"

\end_inset

 steps 1, 3 & 7 we collected important data.
 This data alone is enough to reverse the encryption process and this is
 stored in a structure we refer to as a data map.
 This is described in the following table.
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{fh=H(H(C_{1})+H(C_{2})+...H(C_{n-1}))}$
\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
In this case we use the hash of the concatenated pre-encryption hashes as
 the file hash.
 This is simply more efficient in terms of cpu time.
 The full file hash may be used and is left to the reader to decide on which
 method suits better.
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{H(C_{1})}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{H(EX_{1})}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{H(C_{2})}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{H(EX_{2})}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\ldots$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\ldots$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{H(C_{n})}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathsf{H(EX_{n})}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
With this structure the names of all the chunks are in the right hand column
 and all keys and IVs (which are derived from the original chunk hashes)
 are stored in the left hand column.
 The file hash in the top row identifies the data element and acts as the
 unique key for this file.
 Reversing the process is now obvious.
\end_layout

\begin_layout Enumerate
Retrieve the chunks listed in right hand column.
\end_layout

\begin_layout Enumerate
Create each XOR chunk again.
\end_layout

\begin_layout Enumerate
Reverse the obfuscation stage.
\end_layout

\begin_layout Enumerate
Decrypt each result.
\end_layout

\begin_layout Enumerate
Concatenate the results.
\end_layout

\begin_layout Standard
This is the complete encrypt / decrypt process for each file.
\end_layout

\begin_layout Section
Future works
\end_layout

\begin_layout Standard
To provide effectiveness the algorithms presented in this paper will require
 the addition of a secure mechanism to protect the data map.
 This will be furthered in an example of self authenticating system that
 will use this as entry to a system.
\end_layout

\begin_layout Standard
In addition the information should be looked after a network or system that
 is secured itself.
 This would require a very secure network or perhaps even the advancement
 of a self-managing, self-healing network.
 This will be presented in a future paper on such a system.
\end_layout

\begin_layout Section
Conclusions
\end_layout

\begin_layout Standard
This process allows for multiple data elements to be encrypted in a very
 powerful fashion.
 Indeed there may be some debate as to whether the encryption or obfuscation
 stages cannot be left out (well, at least one of them).
 It is decided this is not a bottleneck in such a system, as data can be
 processed at speeds in excess of current networking capabilities in many
 cases.
 This is open to further research for differing situations though.
\end_layout

\begin_layout Standard
An important issue here is that all data is encrypted using no user information
 or input.
 This means that if the container for all the chunks is a single container
 then duplicate files will produce the exact same chunks and the storage
 system can automatically remove duplicate information.
 It is estimated the savings in such a system would be greater than 95%.
\end_layout

\begin_layout Standard
Also interesting is the fact that the encryption may be seen as a
\begin_inset Quotes eld
\end_inset

step too far
\begin_inset Quotes erd
\end_inset

; nevertheless it does indicate that any break in an encryption cipher will
 not reveal any data to an attacker.
 This is a valuable and important point.
\end_layout

\begin_layout Standard
It is hoped the research in this field will continue and measures of number
 of chunks versus data map size, etc.
 would reveal interesting scope for optimisations and improvements.
\end_layout

\begin_layout Standard
Compression has been missed out from the steps in this paper and can be
 simply added to the process of hash/encryption of each chunk.
 This further improves efficiency, particularly with regard to improving
 data de-duplication results.
\end_layout

\begin_layout Bibliography
\labelwidthstring References
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "1"
key "1"

\end_inset

David Irvine, maidsafe: A new networking paradigm, david.irvine@maidsafe.net
\end_layout

\begin_layout Bibliography
\labelwidthstring References
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "2"
key "2"

\end_inset

Shannon, Claude (1949).
 "Communication Theory of Secrecy Systems".
 Bell System Technical Journal 28 (4): 656–715.
\end_layout

\begin_layout Bibliography
\labelwidthstring References
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "3"
key "3"

\end_inset

Gilbert S.
 Vernam, "Cipher Printing Telegraph Systems For Secret Wire and Radio Telegraphi
c Communications", Journal of the IEEE, Vol 55, pp109–115 (1926).
\end_layout

\begin_layout Bibliography
\labelwidthstring References
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "4"
key "4"

\end_inset

Gilbert S.
 Vernam, "Automatic Telegraph Switching System Plan 55-A", AIEE Transactions
 on Communication and Electronics, May 1958, p.
 239.
 Also in Western Union Technical Review Vol 12 No 2, April 1958, p.
 37.
\end_layout

\begin_layout Bibliography
\labelwidthstring References
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "5"
key "5"

\end_inset

C.E.
 Shannon, “Communication Theory of Secrecy Systems,” Bell System Technical
 Journal, Vol.
 28, No.
 4 (October 1949), pp.
 656–715.
\end_layout

\begin_layout Biography without photo
\begin_inset Argument 1
status open

\begin_layout Plain Layout
David Irvine
\end_layout

\end_inset

 is a Scottish Engineer and innovator who has spent the last 12 years researchin
g ways to make computers function in a more efficient manner.
\end_layout

\begin_layout Biography without photo
He is an Inventor listed on more than 20 patent submissions and was Designer
 of one of the World's largest private networks (Saudi Aramco, over $300M).
 He is an experienced Project Manager and has been involved in start up
 businesses since 1995 and has provided business consultancy to corporates
 and SMEs in many sectors.
\end_layout

\begin_layout Biography without photo
He has presented technology at Google (Seattle), British Computer Society
 (Christmas Lecture) and many others.
\end_layout

\begin_layout Biography without photo
He has spent many years as a lifeboat Helmsman and is a keen sailor when
 time permits.
\end_layout

\end_body
\end_document
